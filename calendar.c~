#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "event.h"
#include "calendar.h"

int init_calendar(const char *name, int days,
                  int (*comp_func) (const void *ptr1, const void *ptr2),
                  void (*free_info_func) (void *ptr), Calendar ** calendar) {

 if ((*calendar) != NULL && name != NULL && days >= 1) {
     (*calendar) = malloc(sizeof(Calendar));
     if (calendar != NULL){
        (*calendar)->name = malloc((strlen(name) + 1));
        if ((*calendar)->name != NULL){
            strcpy((*calendar)->name, name);
            (*calendar)->days = days;
            (*calendar)->comp_func = comp_func;
            (*calendar)->free_info_func = free_info_func;
            (*calendar)->events = calloc(days, sizeof(Event));
            if ((*calendar)->events != NULL) {
                (*calendar)->total_events = 0;
                return SUCCESS;
            }
        }
     }
 }
 return FAILURE;
                  }


int print_calendar(Calendar *calendar, FILE *output_stream, int print_all){
    Event *current_event;
    int i = 0;

  if (calendar != NULL && output_stream != NULL ){
    
    if (print_all){
      fprintf(output_stream, "Calendar's Name: \"%s\"\n", calendar->name);
      fprintf(output_stream, "Days: %d\n", calendar->days);
      fprintf(output_stream, "Total Events: %d\n", calendar->total_events);
      fprintf(output_stream, "\n");
    }

    fprintf(output_stream, "**** Events ****\n");
  
    if (calendar->total_events > 0) {        
        for (i = 0; i < calendar->days; i++) {
            printf("Day %d\n", i + 1);
            current_event = calendar->events[i];
            while (current_event != NULL) {
	            fprintf(output_stream, "Event's Name: \"%s\", Start_time: %d, Duration: %d\n",
		        current_event->name, current_event->start_time, current_event->duration_minutes);
	            current_event = current_event->next;
            }
        }
    }
    return SUCCESS;
  }
  return FAILURE;
}



int add_event(Calendar *calendar, const char *name, int start_time, int duration_minutes, void *info, int day){

Event *current = calendar->events[day - 1], *prev = NULL, *new_item, *checking;

if (calendar != NULL &&  name != NULL && start_time >= 0 && start_time <= 2400
     && duration_minutes > 0 && day >= 1 && day <= calendar->days ) {

  if (find_event(calendar, name, &checking) == FAILURE) {
      new_item = malloc (sizeof(Event));
      if (new_item != NULL) {
        new_item->name = malloc(strlen(name)+1);
	      if (new_item->name != NULL) {
            strcpy(new_item->name, name);
	          new_item->info = info;
	          new_item->start_time = start_time;
	          new_item->duration_minutes = duration_minutes;
        }
      }
  }
  while (current != NULL &&  (calendar->comp_func(current, new_item) < 0)) {
      prev = current;
      current = current->next;
   }

   new_item->next = current;
   if (prev == NULL) { 
      calendar->events[day - 1] = new_item;
   } else {
      prev->next = new_item;
   }
  calendar->total_events++;
  return SUCCESS;
     }
  return FAILURE;
}


int find_event(Calendar *calendar, const char *name, Event **event){
  return FAILURE;
}
int find_event_in_day(Calendar *calendar, const char *name, int day,
                      Event **event){
  return FAILURE;
}
/*int remove_event_helper(Calendar *calendar, const char *name){
  int i = 0;
  Event *prev = NULL, *current, **event = NULL;
  for (i = 0; i < calendar->days; i++) {
      current = calendar->events[i];
      if (strcmp(current->name, name) == 0){
        return i;
      } else {
        current = current->next;
      }
  }
}*/

int remove_event(Calendar *calendar, const char *name){
  int i = 0;
  Event *prev = NULL, *current = calendar->events[i]; /*, **event = NULL;*/
  if (calendar != NULL &&  name != NULL){
  
  for (i = 0; i < calendar->days; i++) {
      current = calendar->events[i]; 
  /*int actual_day = remove_event_helper(calendar, name);
  current = calendar->events[actual_day];*/
  while (current != NULL && strcmp(current->name, name) != 0) {
    prev = current;
    current = current->next;
  }
   if (current == NULL){
      return FAILURE;  
   }
   if (prev == NULL) {
      calendar->events[i] = current->next;  
   } else {
      prev->next = current->next;
   }


  free(current->name);

  if (calendar->free_info_func) {
      calendar->free_info_func(current->info);
  }
  free(current); 
  
  calendar->total_events--;

   return SUCCESS;
    }
  }
  return FAILURE;
}

void *get_event_info(Calendar *calendar, const char *name){
  
}
int clear_calendar(Calendar *calendar){
  
    int i = 0;
    if (calendar != NULL){  
        for (i = 0; i < calendar->days; i++) {
            clear_day(calendar, i + 1);
        }
    return SUCCESS;
  }
  return FAILURE;
}
int clear_day(Calendar *calendar, int day){
  Event *current = calendar->events[day - 1]; 
  if (calendar!= NULL && day >= 1 && day <= calendar->days){

    while (current != NULL) {
      free(current->name);

      if (calendar->free_info_func) {
        calendar->free_info_func(current->info);
      }
      free(current); 
      calendar->total_events--;
      current = current->next;
    }
    return SUCCESS;
  }
  return FAILURE;
}
    
    
      /*remove_event(calendar, current->name);*/
      /*current = calendar->events[day-1]; */
      /*current = current->next;*/
    
    /*return SUCCESS;
  }
  return FAILURE;
}*/

int destroy_calendar(Calendar *calendar){
  if (calendar != NULL) {
        free(calendar->name);
        clear_calendar(calendar);
        free(calendar->events);

        free(calendar);
        return SUCCESS;
    }
    return FAILURE;
}

